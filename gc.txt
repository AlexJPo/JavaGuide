0) задача сборщика мусора найти достежимы и не доистижимые объекты проходя по ссылкам корневых объектов(классы, статические поля объекты стека)
- достижимые объекты помечаются как живые объекты, группируюутся и переходят в old
- не достижимые объекты удаляются

1) сборщик мусора Garbage Collection бывает двух видов:
- young
- old

2) Young GC состоит из:
- Eden
- Survave0
- Survave1

2.1) Young GC останавливает приложение(stop-the-world) целиком и полностью на время сборки мусора.

3) Old GC состоит из:
- Tenured

4) Все объхекты создаются в Eden.

5)Работа Young сборщика мусора:
- сборщик мусора Young GC анализирует область памяти Eden и првоерят достиижимость объектов.
- после анализа живы и досижимые объекты и перемещает их в Survave0. Всю память после данного этапа память Eden очищается. И перемещаем в S1
- Eden повторно заполняется объектами мы их копируем в S0 и из S1 копируем объекты в S0, которе достижимы.
После чего Eden и S1 очищаются. И операция повторяется.
- Спустя какое-то время, объекты которые набрали большое количество проходов сборок мусора и до сих пор живы перемещаются в Old

6) Сущесвтует 8 сбурщиков мусора: 4 young и 4 old. Они работают по парно: young/old

6.1) Young сборщики мусора
- Copy with enabled -XX:+UseSerialGC
- PS Scavenge with enabled -XX:+UseParallelGC
- ParNew with enabled -XX:+UseParNewGC
- G1 young generation with enabled -XX:+UseG1GC

7) Copy with enabled -XX:+UseSerialGC 
- однопоточная реализация анализа достижимости. В один поток мы анализируем достижимость для Eden и для Survave и копируем

8) PS Scavenge with enabled -XX:+UseParallelGC
- многопточная реализация анализа достижимости. В несколько потоков мы анализируем достижимость для Eden и для Survave и копируем

9) ParNew with enabled -XX:+UseParNewGC 
- аналогичен "PS Scavenge with enabled -XX:+UseParallelGC". но оптимизирован для Old 

10) G1 young generation with enabled -XX:+UseG1GC
- одновременно и young, и old сборщик мусора. Нарезает память на блоки, может быть несколько Eden и s0/s1

11) Old сборщики мусора
- MarkSweepCompact with enabled -XX:+UseSerialGC
- PS MarkSweep with enabled -XX:+UseParallelOldGC
- ConcurentMarkSweep with enabled -XX:+UseConcMarkSweepGC

12) MarkSweepCompact with enabled -XX:+UseSerialGC - работает в однопоточном режиме

13) PS MarkSweep with enabled -XX:+UseParallelOldGC - работает в несколько потоков

14) ConcurentMarkSweep with enabled -XX:+UseConcMarkSweepGC - выделение и очиста выполняется паралельно с приложением

15) Работае Old сборщиков усора:
 - Mark - поиск достижимых объектов и размечает достижим объект или нет
 - Sweep - удаляет не достижимые объекты
 - Compact - дефрагмитнирует память, сжимая ее

16) Stop-the-world 
- ситуация, когда сборщику мусора необходимо проанализировать память и сделать он то может только после остановки приложения.
- все алгоритмы кроме ConcurentMarkSweep вызвывают остановку приложения, микро фриз. Посылая сигнал всем потокам встать ан паркуовку parking
И после остановки всех потоков, начинает свою рабоут сборик мусора по анализу и очистке

17) Выбор сборщика мусора:
- SerialGC подходт для небольших, однопоточных приложений около 100 мб. 
- ParallelGC - gодходит для математических вычислений.
- G1 or CuncurentMarkSweep для реалтайм серверов

18) Параметры виртуальной машины:
Memory:
-Xms, -Xmx - min/max memory size. Должны быть одинаковыми
-XX:MaxMetaspace= - размер памяти, выдляемый под статичные объекты и классы
GC:
1h 08m



























