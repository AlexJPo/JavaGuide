Java SE

1) https://www.youtube.com/playlist?list=PLIU76b8Cjem48KXIy83YIm-QM6SwvzjQd
2) http://java-online.ru/swing-joptionpane.xhtml
3) http://docs.oracle.com/javase/tutorial/uiswing/components/componentlist.html
4) http://www.javatpoint.com/how-to-make-an-executable-jar-file-in-java
5) https://www.youtube.com/watch?v=vW2Y7r-vbNw&list=PLNclrLF8MXOwCFz7z13sXj3f7IJcAiENg&ab_channel=%D0%9E%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%D0%BE%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD
6) https://www.youtube.com/watch?v=Jn23UmO_M_0&list=PLEvI1OiL1F3fpQYpc8eNX4lbTUwMLzpWi?&ab_channel=ZhirniToni

https://jsehelper.blogspot.ru/2016/01/blog-post_59.html - вопросы для собеседования

1) Чтение пользовательских данных из консоли
	подключаемя java.util.Scanner
	Инициализируем переменную и указываем поток:
		Scanner sc = new Scanner(System.in);
	Для вывода потока обращаемся к переменной:
		sc.nextLine()

2) JFrame
	создаем отдельный класс для окна наследуя JFrame:
		public class frame extends JFrame {
			private JLabel label;
			public frame() {
				super("Title of frame");
				setLayout(new FlowLayout());

				label = new JLabel("Some text: ");
				label.setToolTipText("ToolTip text - on hovered label");
				add(label);
			}
		}
	подключаем в классе пакеты:
		import java.awt.FlowLayout;
		import javax.swing.JFrame;
		import javax.swing.JLabel;
	указываем текст окна:
		super("Title of frame");
	создаем переменную объекта:
		private JLabel label;
	инициализируем объект:
		label = new JLabel("Some text: ");
	добавляем объект на форму:
		add(label);
	инициализируем класс и вызываем его:
		frame f = new frame();
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setSize(200, 300);
		f.setVisible(true);
	подключаем пакет:
		javax.swing.JFrame;

3) Event
	подключить пакеты:
		import java.awt.event.ActionListener;
		import java.awt.event.ActionEvent;
	добавить класс обработчика событий из интерфейса ActionListener:
		private class thehandler implements ActionListener {
			public void actionPerformed(ActionEvent event) {
				String result = event.getActionCommand();
				System.out.println(result);
			}
		}
	внутри класса инициализируем метод интерфейса ActionListener:
		public void actionPerformed(ActionEvent event) {
			String result = event.getActionCommand();
			System.out.println(result);
		}
	для получения введенного в поле значения:
		event.getActionCommand();
	инициализируем класс обработки события:
		thehandler handler = new thehandler();
	добавляем событие елементу:
		textField.addActionListener(handler);

4) JTable
	создаем модель данных бд:
		public class Persons {
			private String fio;
			private String phone;

			public Persons() {
				this.fio = "";
				this.phone = "";
			}
			public Persons(String fio, String phoneNumber) {
				this.fio = fio;
				this.phone = phoneNumber;
			}
			public String getFIO() { return this.fio; }
			public void setFIO(String fio) { this.fio = fio; }
			public String getPhone() { return this.phone; }
			public void setPhone(String phoneNumber) { this.phone = phoneNumber; }
		}
	создаем модель таблицы, унаследованную от AbstractTableModel:
		public class TableModel extends AbstractTableModel {
			private final int columnsCount = 2;
			private ArrayList<Persons> personsList;

			public TableModel() {
				personsList = new ArrayList<Persons>();
				personsList.add(new Persons("Vital", "123456"));
				personsList.add(new Persons("Sanya", "36545"));
				personsList.add(new Persons("Alex", "228229"));
			}
			@Override
			public int getColumnCount() { return columnsCount; }
			@Override
			public int getRowCount() { return personsList.size(); }
			@Override
			public String getColumnName(int columnIndex) {
				switch (columnIndex) {
					case 0: return "FIO";
					case 1: return "Phone";
				}
				return "";
			}
			@Override
			public Object getValueAt(int rowIndex, int columnIndex) {
				Persons selectedRow = personsList.get(rowIndex);
				switch (columnIndex) {
					case 0:
						return selectedRow.getFIO();
					case 1:
						return selectedRow.getPhone();
				}
				return "";
			}
		}
	в классе инициализируем дефолтные метоты абстрактного класса:
			@Override
			public int getColumnCount() { }
			@Override
			public int getRowCount() { }
			@Override
			public Object getValueAt(int rowIndex, int columnIndex) { }
	создаем массив хранящий объекты базы данных:
		private ArrayList<Persons> personsList;
	создаем конструктор класса:
		public TableModel() {
			personsList = new ArrayList<Persons>();
			personsList.add(new Persons("Vital", "123456"));
			personsList.add(new Persons("Sanya", "36545"));
			personsList.add(new Persons("Alex", "228229"));
		}
	инициализируем модель таблицы:
		TableModel personsTable = new TableModel();
	инициализируем компонент JTable:
		JTable table = new JTable(personsTable);
	инициализируем компонент JScrollPane:
		JScrollPane scrollPane = new JScrollPane(table);
	добавляем на фрейм компонент JScrollPane:
		frame.add(scrollPane);

5) JMenu
	создаем обертку под меню:
		JMenuBar menuBar = new JMenuBar();
	создаем первый пункт меню:
		JMenu menu1 = new JMenu("menu 1");
	создаем подпункты меню:
		JMenuItem menuItem1 = new JMenuItem("item 1");
		JMenuItem menuItem2 = new JMenuItem("item 2");
	добавляем подпункты в пункт меню:
		menu1.add(menuItem1);
		menu1.add(menuItem2);
	если необходимо добавляем сепаратор:
		menu1.addSeparator();
	добавляем меню в обертку:
		menuBar.add(menu1);
	добавляем обертку на форму:
		frame.setJMenuBar(menuBar);
		
		
		
		
		
		
	