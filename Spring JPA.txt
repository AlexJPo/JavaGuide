1) подключаем следующие зависимости:
    compile 'org.springframework:spring-context:4.3.6.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.10.Final'
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.2.10.Final'

2) Создаем следующие бины:
@Bean
public LocalContainerEntityManagerFactoryBean entityManagerFactory(){
    LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();
    factoryBean.setDataSource( this.getDataSource() );
    factoryBean.setPackagesToScan( new String[ ] { "application" } );

    JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter(){
        {
            setGenerateDdl(false);
            setShowSql(true);
        }
    };

    factoryBean.setJpaVendorAdapter( vendorAdapter );
    factoryBean.setJpaProperties( this.additionalProperties() );

    return factoryBean;
}

private Properties additionalProperties() {
    Properties properties = new Properties();
    properties.setProperty("hibernate.dialect", "org.hibernate.dialect.SQLServer2012Dialect");
    properties.setProperty("hibernate.show_sql", "false");
    properties.setProperty("hibernate.format_sql", "true");
    properties.setProperty("hibernate.naming.physical-strategy", "org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl");

    return properties;
}

@Bean
public PlatformTransactionManager transactionManager(){
    JpaTransactionManager transactionManager = new JpaTransactionManager();
    transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());

    return transactionManager;
}

@Bean
public static DataSource getDataSource() {
    DriverManagerDataSource dataSource = new DriverManagerDataSource();
    dataSource.setDriverClassName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
    dataSource.setUrl("jdbc:sqlserver://localhost;databaseName=Moex;");
    dataSource.setUsername("sa");
    dataSource.setPassword("123456");

    return dataSource;
}


3) в классе(контроллер или сервис):
- инициализируем entity
@PersistenceContext
private EntityManager entityManager;

4) для получения текущей сессии:
Session session = entityManager.unwrap(Session.class);
session.save(curve); - сохранение и обновление выполняется через сессию

5) Для работы с данными из бд используется обертка над JPA:
CriteriaBuilder builder = entityManager.getCriteriaBuilder();
CriteriaQuery<GCurveModel> query = builder.createQuery(GCurveModel.class);

Root<GCurveModel> root = query.from(GCurveModel.class);
query.select(root);

try {
    query.where(builder.equal(root.get("tradedate"), simpleDateFormat.parse(date)));
} catch (ParseException e) {
    e.printStackTrace();
}

return entityManager.createQuery(query).getSingleResult();